/* eslint-disable @next/next/no-img-element */
'use client';

import { useState, useRef, useEffect, useCallback, memo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, Volume2 } from 'lucide-react';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';

// Interfaces for type safety
interface StreamPart {
  text: string;
}

interface PuterAI {
  chat: (
    input: string | { role: string; content: string }[],
    options: { model: string; stream?: boolean }
  ) => Promise<AsyncIterable<StreamPart>>;
  txt2speech: (text: string) => Promise<{ play: () => void }>;
}

interface Puter {
  ai: PuterAI;
  print: (content: string) => void;
}

declare global {
  interface Window {
    puter: Puter;
  }
}

// Format AI response to prevent rendering and ensure plain text output
const formatAIResponse = async (text: string, isCodeRequest: boolean = false): Promise<string> => {
  if (!text) return '';

  // Escape all HTML characters to prevent rendering
  const escapeHtml = (str: string) =>
    str
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');

  if (isCodeRequest) {
    // For code requests, wrap in pre/code tags but ensure content is escaped
    const langMatch = text.match(/```(\w+)/);
    const lang = langMatch ? langMatch[1] : 'text';
    const cleanCode = text.replace(/```(\w+)?\n?|\n?```/g, '').trim();
    const escapedCode = escapeHtml(cleanCode);
    return `<pre class="bg-gray-900 p-4 rounded-xl overflow-x-auto"><code class="language-${lang}">${escapedCode}</code></pre>`;
  }

  // For non-code responses, escape all content and format as plain text
  const formattedText = escapeHtml(text)
    .replace(/\n{2,}/g, '\n\n') // Normalize multiple newlines
    .replace(/(\S[^\n]*)\n\n/g, '$1\n\n'); // Preserve paragraphs as plain text

  return `<pre class="bg-gray-900 p-4 rounded-xl overflow-x-auto">${formattedText}</pre>`;
};

// Strip HTML tags for text-to-speech
const stripHtmlTags = (html: string): string => {
  const div = document.createElement('div');
  div.innerHTML = html;
  return div.textContent || div.innerText || '';
};

// Format user input for display
const formatUserInput = (text: string): string => {
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

// Memoized ChatMessage component
const ChatMessage = memo(({ role, content, onSpeak }: ChatMessageProps) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    exit={{ opacity: 0, y: -20 }}
    transition={{ duration: 0.4, ease: 'easeOut' }}
    className={`mb-6 ${role === 'user' ? 'text-right' : 'text-left'}`}
    role="region"
    aria-label={role === 'user' ? 'User message' : 'Assistant message'}
  >
    <div
      className={`inline-block rounded-xl p-5 max-w-[85%] sm:max-w-[75%] break-words ${
        role === 'user' ? 'bg-blue-700/90 text-white' : 'bg-gray-800/90 text-gray-100'
      } shadow-lg transition-all duration-300 hover:shadow-xl`}
    >
      <div className="flex items-center justify-between mb-3">
        <strong className={`text-sm font-medium ${role === 'user' ? 'text-blue-200' : 'text-teal-400'}`}>
          {role === 'user' ? 'You' : 'Grok'}:
        </strong>
        {role === 'assistant' && onSpeak && (
          <motion.button
            onClick={onSpeak}
            whileHover={{ scale: 1.15 }}
            whileTap={{ scale: 0.95 }}
            className="text-gray-300 hover:text-teal-400 transition-colors focus:outline-none focus:ring-2 focus:ring-teal-400"
            aria-label="Read message aloud"
          >
            <Volume2 size={20} />
          </motion.button>
        )}
      </div>
      <div className="text-sm sm:text-base leading-relaxed">
        <div dangerouslySetInnerHTML={{ __html: content }} />
      </div>
    </div>
  </motion.div>
));
ChatMessage.displayName = 'ChatMessage';

// Loading animation component
const LoadingAnimation: React.FC = () => (
  <motion.div
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    exit={{ opacity: 0 }}
    className="flex justify-center items-center py-4"
    aria-live="polite"
    aria-label="Loading response"
  >
    <div className="flex space-x-2">
      {[...Array(3)].map((_, i) => (
        <motion.div
          key={i}
          className="w-3 h-3 bg-teal-400 rounded-full"
          animate={{
            y: [0, -10, 0],
            opacity: [0.3, 1, 0.3],
          }}
          transition={{
            duration: 0.6,
            delay: i * 0.2,
            repeat: Infinity,
            ease: 'easeInOut',
          }}
        />
      ))}
    </div>
    <span className="ml-3 text-gray-400 text-sm">Processing...</span>
  </motion.div>
);
LoadingAnimation.displayName = 'LoadingAnimation';

interface ChatMessageProps {
  role: 'user' | 'assistant';
  content: string;
  onSpeak?: () => void;
}

export default function AIPage() {
  const [messages, setMessages] = useState<
    { role: 'user' | 'assistant'; content: string; rawContent?: string }[]
  >([
    {
      role: 'assistant',
      content: '',
      rawContent: '',
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Initialize welcome message
  useEffect(() => {
    const initializeMessages = async () => {
      const initialMessageRaw = "Hi there! I'm Grok, your witty AI assistant. I'm here to help you with anything you'd like to know about. What's on your mind?";
      try {
        const initialMessage = await formatAIResponse(initialMessageRaw);
        setMessages([{ role: 'assistant', content: initialMessage, rawContent: initialMessageRaw }]);
      } catch (error) {
        console.error('Failed to initialize messages:', error);
        setError('Failed to load initial message. Please refresh the page.');
      }
    };
    initializeMessages();
  }, []);

  // Auto-scroll to latest message
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus textarea on mount
  useEffect(() => {
    textareaRef.current?.focus();
  }, []);

  // Handle text-to-speech
  const handleSpeak = useCallback(async (text: string | undefined) => {
    if (!text) {
      window.puter.print('No text available to speak.');
      return;
    }
    try {
      window.puter.print('Loading speech...');
      const cleanText = stripHtmlTags(text);
      const audio = await window.puter.ai.txt2speech(cleanText);
      audio.play();
      window.puter.print('Playing audio...');
    } catch (error) {
      console.error('Error in text-to-speech:', error);
      window.puter.print('Failed to generate speech.');
    }
  }, []);

  // Handle sending question
  const askQuestion = useCallback(async () => {
    if (!input.trim()) return;

    const userMessage = { role: 'user' as const, content: formatUserInput(input) };
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    setError(null);

    try {
      const isCodeRequest = input.toLowerCase().includes('code') || input.toLowerCase().includes('script');
      const response = await window.puter.ai.chat(input, {
        model: 'x-ai/grok-3-beta',
        stream: true,
      });

      let assistantResponse = '';
      for await (const part of response) {
        assistantResponse += part.text;
        const formattedResponse = await formatAIResponse(assistantResponse, isCodeRequest);
        setMessages((prev) => {
          const updatedMessages = [...prev];
          const lastMessage = updatedMessages[updatedMessages.length - 1];
          if (lastMessage.role === 'assistant') {
            updatedMessages[updatedMessages.length - 1] = {
              role: 'assistant',
              content: formattedResponse,
              rawContent: assistantResponse,
            };
          } else {
            updatedMessages.push({
              role: 'assistant',
              content: formattedResponse,
              rawContent: assistantResponse,
            });
          }
          return updatedMessages;
        });
      }
    } catch (error) {
      console.error('Error fetching Grok response:', error);
      const errorMessage = await formatAIResponse('Oops, something went wrong. Please try again!');
      setMessages((prev) => [
        ...prev,
        { role: 'assistant', content: errorMessage, rawContent: 'Oops, something went wrong. Please try again!' },
      ]);
      setError('Failed to fetch response. Please try again.');
    } finally {
      setIsLoading(false);
      textareaRef.current?.focus();
    }
  }, [input]);

  // Handle key press for sending message
  const handleKeyPress = useCallback(
    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter' && !isLoading) {
        askQuestion();
      }
    },
    [askQuestion, isLoading]
  );

  // Animation variants
  const buttonVariants = {
    hover: { scale: 1.05, boxShadow: '0 0 20px rgba(45, 212, 191, 0.6)' },
    tap: { scale: 0.95 },
    loading: { opacity: 0.7, scale: 1 },
  };

  const iconVariants = {
    initial: { rotate: 0, scale: 1 },
    hover: { rotate: [0, 10, -10, 0], scale: 1.1 },
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-950 to-gray-900 font-sans text-gray-100 transition-colors duration-500">
      <div className="relative overflow-hidden">
        <div className="pointer-events-none absolute inset-0">
          <div
            className="absolute h-72 w-72 sm:h-96 sm:w-96 animate-pulse rounded-full bg-teal-500/20 blur-3xl"
            style={{ top: '5%', left: '5%' }}
          />
          <div
            className="absolute h-72 w-72 sm:h-96 sm:w-96 animate-pulse rounded-full bg-purple-500/20 blur-3xl delay-1000"
            style={{ bottom: '10%', right: '10%' }}
          />
        </div>

        <Navbar />

        <section className="relative flex min-h-screen items-center justify-center px-4 pt-24 sm:pt-28 md:pt-32 lg:pt-36">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, ease: 'easeOut' }}
            className="mx-auto w-full max-w-5xl"
          >
            <h1 className="mb-6 bg-clip-text text-center text-3xl font-extrabold text-transparent sm:text-4xl md:text-5xl lg:text-6xl bg-gradient-to-r from-teal-400 to-blue-500">
              Chat with Grok
            </h1>
            <motion.p
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.5, duration: 0.8 }}
              className="mb-8 text-center text-base sm:text-lg md:text-xl text-gray-200 font-light"
            >
              Ask Grok anything and get insightful, witty responses instantly!
            </motion.p>
            <div className="rounded-2xl border border-teal-500/20 bg-gray-800/30 p-6 shadow-2xl backdrop-blur-lg">
              {error && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="mb-4 text-red-400 text-sm text-center"
                  role="alert"
                >
                  {error}
                </motion.div>
              )}
              <div className="mb-4 h-[60vh] sm:h-[65vh] overflow-y-auto rounded-xl border border-teal-500/20 bg-gray-900/60 p-5 scrollbar-thin scrollbar-thumb-teal-500/50 scrollbar-track-gray-900/50">
                <AnimatePresence>
                  {messages.map((message, index) => (
                    <ChatMessage
                      key={index}
                      role={message.role}
                      content={message.content}
                      onSpeak={
                        message.role === 'assistant' && message.rawContent
                          ? () => handleSpeak(message.rawContent)
                          : undefined
                      }
                    />
                  ))}
                  {isLoading && <LoadingAnimation />}
                </AnimatePresence>
                <div ref={messagesEndRef} />
              </div>
              <div className="flex flex-col sm:flex-row gap-3">
                <textarea
                  ref={textareaRef}
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyDown={handleKeyPress}
                  placeholder="Ask Grok anything... (Press Ctrl+Enter to send)"
                  className="flex-grow rounded-xl border border-teal-500/20 bg-gray-900/70 p-4 text-gray-100 focus:outline-none focus:ring-2 focus:ring-teal-400 resize-y min-h-[100px] sm:min-h-[120px] text-sm sm:text-base transition-all duration-300 hover:border-teal-500/40"
                  disabled={isLoading}
                  aria-label="Chat input"
                />
                <motion.button
                  onClick={askQuestion}
                  variants={buttonVariants}
                  whileHover="hover"
                  whileTap="tap"
                  animate={isLoading ? 'loading' : 'initial'}
                  disabled={isLoading}
                  className="flex items-center justify-center gap-2 rounded-xl border border-teal-500/30 bg-gradient-to-r from-teal-600 to-blue-600 px-5 py-3 text-white shadow-md transition-all duration-300 hover:from-teal-500 hover:to-blue-500 hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-teal-400"
                  aria-label="Send message"
                >
                  <motion.span variants={iconVariants}>
                    <Send size={20} />
                  </motion.span>
                  <span className="font-semibold hidden sm:inline">Ask</span>
                </motion.button>
              </div>
            </div>
          </motion.div>
        </section>
        <Footer />
      </div>
    </div>
  );
}