/* eslint-disable @next/next/no-img-element */
'use client';

import { useState, useRef, useEffect, useCallback, memo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, Volume2 } from 'lucide-react';
import Prism from 'prismjs';
import 'prismjs/themes/prism-tomorrow.css';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';

interface StreamPart {
  text: string;
}

interface PuterAI {
  chat: (
    input: string | { role: string; content: string }[],
    options: { model: string; stream?: boolean }
  ) => Promise<AsyncIterable<StreamPart>>;
  txt2speech: (text: string) => Promise<{ play: () => void }>;
}

interface Puter {
  ai: PuterAI;
  print: (content: string) => void;
}

declare global {
  interface Window {
    puter: Puter;
  }
}

const formatAIResponse = async (text: string, isCodeRequest: boolean = false): Promise<string> => {
  if (!text) return '<p class="text-gray-400">No response content.</p>';

  const escapeHTML = (code: string) =>
    code
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');

  if (isCodeRequest || text.includes('```')) {
    const langMatch = text.match(/```(\w+)?/);
    const lang = langMatch ? langMatch[1] : 'text';
    const codeContent = text.replace(/```[\s\S]*?(\w+)?\n?|```/g, '').trim();
    const escaped = escapeHTML(codeContent);
    return `<pre class="bg-gray-900 p-4 rounded-lg overflow-x-auto text-sm"><code class="language-${lang}">${escaped}</code></pre>`;
  }

  const formattedText = text
    .replace(/\*\*(.*?)\*\*/g, '<strong class="font-bold">$1</strong>')
    .replace(/\*(.*?)\*/g, '<em class="italic">$1</em>')
    .replace(/__(.*?)__/g, '<strong class="font-bold">$1</strong>')
    .replace(/_(.*?)_/g, '<em class="italic">$1</em>');

  const lines = formattedText.split('\n');
  const parsedLines: string[] = [];
  let listItems: string[] = [];

  for (const line of lines) {
    const trimmed = line.trim();
    if (!trimmed) continue;

    if (trimmed.startsWith('### ')) {
      parsedLines.push(`<h3 class="text-lg font-medium text-gray-100 mb-2">${trimmed.slice(4)}</h3>`);
    } else if (trimmed.startsWith('## ')) {
      parsedLines.push(`<h2 class="text-xl font-semibold text-gray-100 mb-3">${trimmed.slice(3)}</h2>`);
    } else if (trimmed.startsWith('# ')) {
      parsedLines.push(`<h1 class="text-2xl font-bold text-gray-100 mb-4">${trimmed.slice(2)}</h1>`);
    } else if (/^-{3,}$/.test(trimmed)) {
      parsedLines.push('<hr class="border-gray-700 my-4">');
    } else if (/^(-|\*) /.test(trimmed)) {
      listItems.push(`<li class="ml-4 list-disc text-gray-200">${trimmed.replace(/^(-|\*) /, '')}</li>`);
    } else {
      if (listItems.length > 0) {
        parsedLines.push(`<ul class="mb-4">${listItems.join('')}</ul>`);
        listItems = [];
      }
      parsedLines.push(`<p class="mb-3 text-gray-200 leading-relaxed">${trimmed}</p>`);
    }
  }

  if (listItems.length > 0) {
    parsedLines.push(`<ul class="mb-4">${listItems.join('')}</ul>`);
  }

  let finalHTML = parsedLines.join('');

  if (typeof window !== 'undefined') {
    const { default: DOMPurify } = await import('dompurify');
    finalHTML = DOMPurify.sanitize(finalHTML, {
      ADD_TAGS: ['p', 'h1', 'h2', 'h3', 'ul', 'li', 'strong', 'em', 'hr', 'pre', 'code'],
      ADD_ATTR: ['class'],
      FORBID_TAGS: ['script', 'style', 'iframe', 'object', 'embed'],
      FORBID_ATTR: ['onerror', 'onload', 'onclick', 'onmouseover'],
    });

    setTimeout(() => {
      if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
      }
    }, 0);
  }

  return finalHTML || '<p class="text-gray-400">No content to display.</p>';
};

const stripHtmlTags = (html: string): string => {
  const div = document.createElement('div');
  div.innerHTML = html;
  return div.textContent || div.innerText || '';
};

const formatUserInput = (text: string): string => {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
};

const ChatMessage = memo(({ role, content, onSpeak }: ChatMessageProps) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    exit={{ opacity: 0, y: -20 }}
    transition={{ duration: 0.4, ease: 'easeOut' }}
    className={`mb-6 ${role === 'user' ? 'text-right' : 'text-left'}`}
    role="region"
    aria-label={role === 'user' ? 'User message' : 'Assistant message'}
  >
    <div
      className={`inline-block rounded-2xl p-5 max-w-[85%] sm:max-w-[75%] break-words ${
        role === 'user'
          ? 'bg-gradient-to-r from-blue-600 to-blue-800 text-white'
          : 'bg-gradient-to-r from-gray-700 to-gray-800 text-gray-100'
      } shadow-md transition-all duration-300 hover:shadow-lg`}
    >
      <div className="flex items-center justify-between mb-3">
        <strong className={`text-sm font-medium ${role === 'user' ? 'text-blue-200' : 'text-teal-300'}`}>
          {role === 'user' ? 'You' : 'CoreDev'}:
        </strong>
        {role === 'assistant' && onSpeak && (
          <motion.button
            onClick={onSpeak}
            whileHover={{ scale: 1.15 }}
            whileTap={{ scale: 0.95 }}
            className="text-gray-300 hover:text-teal-300 transition-colors focus:outline-none focus:ring-2 focus:ring-teal-400 rounded-full p-1"
            aria-label="Read message aloud"
          >
            <Volume2 size={18} />
          </motion.button>
        )}
      </div>
      <div
        className="prose prose-invert max-w-none text-sm sm:text-base leading-relaxed"
        dangerouslySetInnerHTML={{ __html: content }}
      />
    </div>
  </motion.div>
));
ChatMessage.displayName = 'ChatMessage';

const LoadingAnimation: React.FC = () => (
  <motion.div
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    exit={{ opacity: 0 }}
    className="flex justify-center items-center py-4"
    aria-live="polite"
    aria-label="Loading response"
  >
    <div className="flex space-x-2">
      {[...Array(3)].map((_, i) => (
        <motion.div
          key={i}
          className="w-3 h-3 bg-teal-300 rounded-full"
          animate={{
            y: [0, -12, 0],
            opacity: [0.4, 1, 0.4],
          }}
          transition={{
            duration: 0.5,
            delay: i * 0.15,
            repeat: Infinity,
            ease: 'easeInOut',
          }}
        />
      ))}
    </div>
    <span className="ml-3 text-gray-300 text-sm font-medium">CoreDev is thinking...</span>
  </motion.div>
);
LoadingAnimation.displayName = 'LoadingAnimation';

interface ChatMessageProps {
  role: 'user' | 'assistant';
  content: string;
  onSpeak?: () => void;
}

export default function AIPage() {
  const [messages, setMessages] = useState<
    { role: 'user' | 'assistant'; content: string; rawContent?: string }[]
  >([
    {
      role: 'assistant',
      content: '',
      rawContent: '',
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedModel, setSelectedModel] = useState<'o3-mini' | 'x-ai/grok-3-beta'>('x-ai/grok-3-beta');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  useEffect(() => {
    const initializeMessages = async () => {
      const initialMessageRaw = "Hi there! I'm CoreDev, your witty AI assistant. I'm here to help you with anything you'd like to know about. What's on your mind?";
      try {
        const initialMessage = await formatAIResponse(initialMessageRaw);
        setMessages([{ role: 'assistant', content: initialMessage, rawContent: initialMessageRaw }]);
      } catch (error) {
        console.error('Failed to initialize messages:', error);
        setError('Failed to load initial message. Please refresh the page.');
      }
    };
    initializeMessages();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    textareaRef.current?.focus();
  }, []);

  const handleSpeak = useCallback(async (text: string | undefined) => {
    if (!text) {
      window.puter.print('No text available to speak.');
      return;
    }
    try {
      window.puter.print('Loading speech...');
      const cleanText = stripHtmlTags(text);
      const audio = await window.puter.ai.txt2speech(cleanText);
      audio.play();
      window.puter.print('Playing audio...');
    } catch (error) {
      console.error('Error in text-to-speech:', error);
      window.puter.print('Failed to generate speech.');
    }
  }, []);

  const askQuestion = useCallback(async () => {
    if (!input.trim()) return;

    const userMessage = { role: 'user' as const, content: formatUserInput(input) };
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    setError(null);

    try {
      const isCodeRequest = input.toLowerCase().includes('code') ||
                           input.toLowerCase().includes('script') ||
                           input.toLowerCase().includes('html') ||
                           input.toLowerCase().includes('css') ||
                           input.toLowerCase().includes('javascript') ||
                           input.toLowerCase().includes('python') ||
                           input.toLowerCase().includes('java') ||
                           input.toLowerCase().includes('program') ||
                           input.toLowerCase().includes('coding');
      const response = await window.puter.ai.chat(input, {
        model: selectedModel, // Use the selected model
        stream: true,
      });

      let assistantResponse = '';
      for await (const part of response) {
        assistantResponse += part.text;
        const formattedResponse = await formatAIResponse(assistantResponse, isCodeRequest);
        setMessages((prev) => {
          const updatedMessages = [...prev];
          const lastMessage = updatedMessages[updatedMessages.length - 1];
          if (lastMessage.role === 'assistant') {
            updatedMessages[updatedMessages.length - 1] = {
              role: 'assistant',
              content: formattedResponse,
              rawContent: assistantResponse,
            };
          } else {
            updatedMessages.push({
              role: 'assistant',
              content: formattedResponse,
              rawContent: assistantResponse,
            });
          }
          return updatedMessages;
        });
      }
    } catch (error) {
      console.error('Error fetching CoreDev response:', error);
      const errorMessage = await formatAIResponse('Oops, something went wrong. Please try again!');
      setMessages((prev) => [
        ...prev,
        { role: 'assistant', content: errorMessage, rawContent: 'Oops, something went wrong. Please try again!' },
      ]);
      setError('Failed to fetch response. Please try again.');
    } finally {
      setIsLoading(false);
      textareaRef.current?.focus();
    }
  }, [input, selectedModel]);

  const handleKeyPress = useCallback(
    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter' && !isLoading) {
        askQuestion();
      }
    },
    [askQuestion, isLoading]
  );

  const buttonVariants = {
    hover: { scale: 1.05, boxShadow: '0 0 20px rgba(45, 212, 191, 0.6)' },
    tap: { scale: 0.95 },
    loading: { opacity: 0.7, scale: 1 },
  };

  const iconVariants = {
    initial: { rotate: 0, scale: 1 },
    hover: { rotate: [0, 10, -10, 0], scale: 1.1 },
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-950 to-teal-900 font-sans text-gray-100 transition-colors duration-500">
      <style jsx>{`
        /* Custom Scrollbar */
        .custom-scroll::-webkit-scrollbar {
          width: 8px;
        }
        .custom-scroll::-webkit-scrollbar-track {
          background: rgba(17, 24, 39, 0.5);
          border-radius: 4px;
        }
        .custom-scroll::-webkit-scrollbar-thumb {
          background: rgba(45, 212, 191, 0.5);
          border-radius: 4px;
        }
        .custom-scroll::-webkit-scrollbar-thumb:hover {
          background: rgba(45, 212, 191, 0.8);
        }
        /* Firefox */
        .custom-scroll {
          scrollbar-color: rgba(45, 212, 191, 0.5) rgba(17, 24, 39, 0.5);
          scrollbar-width: thin;
        }
        /* Placeholder Animation */
        textarea::placeholder {
          color: rgba(209, 213, 219, 0.5);
          transition: opacity 0.3s ease;
        }
        textarea:focus::placeholder {
          opacity: 0.7;
        }
        /* Toggle Switch */
        .switch {
          position: relative;
          display: inline-block;
          width: 60px;
          height: 34px;
        }
        .switch input {
          opacity: 0;
          width: 0;
          height: 0;
        }
        .slider {
          position: absolute;
          cursor: pointer;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: #4b5563;
          transition: 0.4s;
          border-radius: 34px;
        }
        .slider:before {
          position: absolute;
          content: '';
          height: 26px;
          width: 26px;
          left: 4px;
          bottom: 4px;
          background-color: white;
          transition: 0.4s;
          border-radius: 50%;
        }
        input:checked + .slider {
          background-color: #2dd4bf;
        }
        input:checked + .slider:before {
          transform: translateX(26px);
        }
        .slider.round {
          border-radius: 34px;
        }
        .slider.round:before {
          border-radius: 50%;
        }
      `}</style>
      <div className="relative overflow-hidden">
        <div className="pointer-events-none absolute inset-0">
          <div
            className="absolute h-80 w-80 sm:h-96 sm:w-96 animate-pulse rounded-full bg-teal-500/20 blur-3xl"
            style={{ top: '10%', left: '10%' }}
          />
          <div
            className="absolute h-80 w-80 sm:h-96 sm:w-96 animate-pulse rounded-full bg-blue-500/20 blur-3xl delay-1000"
            style={{ bottom: '15%', right: '15%' }}
          />
        </div>

        <Navbar />

        <section className="relative flex min-h-screen items-center justify-center px-4 sm:px-6 lg:px-8 pt-24 sm:pt-28 md:pt-32 lg:pt-36">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, ease: 'easeOut' }}
            className="mx-auto w-full max-w-5xl"
          >
            <h1 className="mb-6 bg-clip-text text-center text-3xl font-extrabold text-transparent sm:text-4xl md:text-5xl lg:text-6xl bg-gradient-to-r from-teal-400 via-blue-400 to-teal-600 drop-shadow-md">
              Chat with CoreDev
            </h1>
            <motion.p
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.5, duration: 0.8 }}
              className="mb-8 text-center text-base sm:text-lg md:text-xl text-gray-200 font-light drop-shadow-sm"
            >
              Ask CoreDev anything and get insightful, witty responses instantly!
            </motion.p>
            <div className="flex items-center justify-end mb-4">
              <span className="mr-3 text-sm text-gray-200">
                {selectedModel === 'o3-mini' ? 'o3-mini' : 'Grok-3-Beta'}
              </span>
              <label className="switch">
                <input
                  type="checkbox"
                  checked={selectedModel === 'o3-mini'}
                  onChange={() =>
                    setSelectedModel((prev) =>
                      prev === 'o3-mini' ? 'x-ai/grok-3-beta' : 'o3-mini'
                    )
                  }
                />
                <span className="slider round"></span>
              </label>
            </div>
            <div className="rounded-2xl border border-teal-500/20 bg-gray-800/40 p-6 shadow-xl backdrop-blur-lg">
              {error && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="mb-4 text-red-400 text-sm text-center font-medium"
                  role="alert"
                >
                  {error}
                </motion.div>
              )}
              <div
                className="mb-4 h-[60vh] sm:h-[65vh] overflow-y-auto rounded-xl border border-teal-500/30 bg-gray-900/70 p-5 custom-scroll relative"
              >
                <AnimatePresence>
                  {messages.map((message, index) => (
                    <ChatMessage
                      key={index}
                      role={message.role}
                      content={message.content}
                      onSpeak={
                        message.role === 'assistant' && message.rawContent
                          ? () => handleSpeak(message.rawContent)
                          : undefined
                      }
                    />
                  ))}
                  {isLoading && <LoadingAnimation />}
                </AnimatePresence>
                <div ref={messagesEndRef} />
              </div>
              <div className="flex flex-col sm:flex-row gap-3">
                <textarea
                  ref={textareaRef}
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyDown={handleKeyPress}
                  placeholder="Ask CoreDev anything... (Ctrl+Enter to send)"
                  className="flex-grow rounded-xl border border-teal-500/30 bg-gray-900/80 p-4 text-gray-100 focus:outline-none focus:ring-2 focus:ring-teal-400 focus:border-teal-400 resize-y min-h-[100px] sm:min-h-[120px] text-sm sm:text-base transition-all duration-300 hover:border-teal-500/50 placeholder:text-gray-400"
                  disabled={isLoading}
                  aria-label="Chat input"
                />
                <motion.button
                  onClick={askQuestion}
                  variants={buttonVariants}
                  whileHover="hover"
                  whileTap="tap"
                  animate={isLoading ? 'loading' : 'initial'}
                  disabled={isLoading}
                  className="flex items-center justify-center gap-2 rounded-xl border border-teal-500/30 bg-gradient-to-r from-teal-500 to-blue-500 px-5 py-3 text-white shadow-md transition-all duration-300 hover:from-teal-400 hover:to-blue-400 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-teal-400 disabled:cursor-not-allowed disabled:opacity-70"
                  aria-label="Send message"
                >
                  <motion.span variants={iconVariants}>
                    <Send size={18} />
                  </motion.span>
                  <span className="font-semibold hidden sm:inline">Ask</span>
                </motion.button>
              </div>
            </div>
          </motion.div>
        </section>
        <Footer />
      </div>
    </div>
  );
}